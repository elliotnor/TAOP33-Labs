#-------------------------------------------------------------------------------
# Diet problem
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
#  Load packages
#-------------------------------------------------------------------------------
using JuMP, HiGHS, JSON3, Printf

#-------------------------------------------------------------------------------
# Additional functions
#-------------------------------------------------------------------------------

include("additional_functions.jl")

avdelare = repeat('-',60)

#-------------------------------------------------------------------------------
# Input problem DATA from JSON file
#-------------------------------------------------------------------------------
json_data   = read("skog1.json", String);
DATA        = JSON3.read(json_data)
#-------------------------------------------------------------------------------
MAT     = DATA.MAT								# index using "j in MAT"
BEHOV   = DATA.BEHOV							# index using "i in BEHOV"
pris    = DATA.pris								# pris[j]
maxport = DATA.maxport							# maxport[j]
minkrav = DATA.minkrav							# minkrav[i]
maxkrav = DATA.maxkrav							# maxkrav[i]
inneh   = DATA.inneh							# inneh[i][j]

#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# The model saved with name DIET
#-------------------------------------------------------------------------------
DIET  = Model(HiGHS.Optimizer)

#-------------------------------------------------------------------------------
# Define variables
#-------------------------------------------------------------------------------
@variable(DIET, 0 <= port[j in MAT] <= maxport[j])
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# Objective function
#-------------------------------------------------------------------------------
@objective(DIET, Min,
    sum(pris[j] * port[j]  for j in MAT) )
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# Constraints
#-------------------------------------------------------------------------------
@constraint(DIET, minnytta[i in BEHOV],
	sum( inneh[i][j] * port[j] for j in MAT ) >= minkrav[i] )
#------------------------------------------------------------------------------
@constraint(DIET, maxnytta[i in BEHOV],
	sum( inneh[i][j] * port[j] for j in MAT ) <= maxkrav[i] )
#------------------------------------------------------------------------------




#-------------------------------------------------------------------------------
# Display defined problem
#-------------------------------------------------------------------------------
println(avdelare)
println("Diet problem")
println(avdelare)
print(DIET)
println(avdelare)
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
#Solve the optimisation problem
#-------------------------------------------------------------------------------
println("\n\n\n>>> SOLVING DIET PROBLEM <<<\n")
solution = optimize!(DIET)

#-------------------------------------------------------------------------------
# Print the objective function value
#-------------------------------------------------------------------------------

println("\n\n\n>>> OPTIMAL SOLUTION <<<\n")
println(avdelare)
zStar = objective_value(DIET)
#zStar = round(zStar,digits=3)
println( "Optimal objective value:\n $(zStar)")
println(avdelare)


#-------------------------------------------------------------------------------
# Print the optimal solution
#-------------------------------------------------------------------------------

println("Optimal Solution:")
if Integer_model( DIET ) == 1
	print_integer( DIET )
else
	print_continuous( DIET )
end

println(avdelare)
#-------------------------------------------------------------------------------